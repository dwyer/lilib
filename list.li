(define (cons* x . ys)
  (cons x (let iter ((ys ys))
            (cond ((null? ys) null)
                  ((null? (cdr ys)) (car ys))
                  (else (cons (car ys) (iter (cdr ys))))))))

(define (fold-left proc init lst)
  (if (null? lst)
    init
    (fold-left proc (proc (car lst) init) (cdr lst))))

(define (fold-right proc init lst)
  (if (null? lst)
    init
    (fold-right proc (proc init (car lst)) (cdr lst))))

(define list-split
  (letrec ((*list-split*
             (lambda (lst obj n)
               (let loop ((next lst) (last null) (n n))
                 (cond ((null? next) (list last))
                       ((equal? (car next) obj)
                        (if (= n 1)
                          (cons last (list (cdr next)))
                          (cons last (loop (cdr next) null (- n 1)))))
                       (else (loop (cdr next)
                                   (append last (list (car next)))
                                   n)))))))
    (lambda (lst obj . args)
      (if (zero? (length args))
        (*list-split* lst obj 0)
        (apply *list-split* `(,lst ,obj ,@args))))))

(define (take lst k)
  (if (zero? k)
    '()
    (cons (car lst) (take (cdr lst) (- k 1)))))
